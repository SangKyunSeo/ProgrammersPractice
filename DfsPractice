class Solution {
    static boolean visit[];  // 방문 체크
    static int a=0; // 함수 결과값 저장
    public int solution(int k, int[][] dungeons) {
        int answer = -1;
        visit = new boolean[dungeons.length];
        dfs(0,k,dungeons);
        answer = a;
        return answer;
    }
    public void dfs(int depth,int k, int[][] dungeons){
    
        // 반복문을 돌며 최대 던전 수 계산
        for(int i =0;i<dungeons.length;i++){
            if(!visit[i]&&dungeons[i][0]<=k){ // 방문한 적이 없고 최소 필요 피로도를 만족한다면
                visit[i]=true;
                dfs(depth+1,k-dungeons[i][1],dungeons); // depth+1 을 통해 방문 던전을 계산해주며 소모필요도 계산하여 다시 탐색
                visit[i]=false;  // 123,132,213,231,312,321의 탐색을 가능
            }
        }
        a = Math.max(a, depth); // 최대 던전 수 계산
    }
}
